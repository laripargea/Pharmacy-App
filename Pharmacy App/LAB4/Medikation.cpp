#include <iostream>
#include "Medikation.h"
#include <exception>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Default constructor. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

Medikation::Medikation()
{
	Name = "\0";
	Konzentration = 0;
	Menge = 0;
	Preis = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Constructor. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <param name="name">				The name. </param>
/// <param name="konzentration">	The konzentration. </param>
/// <param name="menge">			The menge. </param>
/// <param name="preis">			The preis. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

Medikation::Medikation(string name, int konzentration, int menge, float preis)
{
    Name = name;
	Konzentration = konzentration;
	Menge = menge;
    Preis = preis;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the name. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <returns>	The name. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

string Medikation::get_Name()
{
	return Name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the konzentration. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <returns>	The konzentration. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

int Medikation::get_Konzentration()
{
	return Konzentration;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the menge. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <returns>	The menge. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

int Medikation::get_Menge()
{
	return Menge;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the preis. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <returns>	The preis. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

double Medikation::get_Preis()
{
	return Preis;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets a name. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <param name="name">	The name. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Medikation::set_Name(string name)
{
	Name = name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets a konzentration. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <param name="konzentration">	The konzentration. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Medikation::set_Konzentration(int konzentration)
{
	Konzentration = konzentration;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets a menge. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <param name="menge">	The menge. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Medikation::set_Menge(int menge)
{
	Menge = menge;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets the preis. </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
///
/// <param name="preis">	The preis. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Medikation::set_Preis(float preis)
{
	Preis = preis;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Zeigens this.  </summary>
///
/// <remarks>	Larisa, 4/4/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Medikation::zeigen()
{
	cout << "Name: " << Name << " Konzentration: " << Konzentration << " Menge: " << Menge << " Preis: " << Preis << endl;
}


/// <summary>	Equality operator. </summary>
///
/// <remarks>	Maria, 4/10/2020. </remarks>
///
/// <param name="med1">	The first median. </param>
///
/// <returns>	True if the parameters are considered equivalent. </returns>

bool Medikation::operator==(const Medikation& med1)
{
	return med1.Name == Name && med1.Konzentration == Konzentration && med1.Menge == Menge && med1.Preis == Preis;

}


/// <summary>	Inequality operator. </summary>
///
/// <remarks>	Maria, 4/10/2020. </remarks>
///
/// <param name="med1">	The first median. </param>
///
/// <returns>	True if the parameters are not considered equivalent. </returns>

bool Medikation::operator!=(const Medikation& med1)
{
	return med1.Name != Name || med1.Konzentration != Konzentration || med1.Menge != Menge || med1.Preis != Preis;

}
